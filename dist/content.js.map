{"version":3,"file":"content.js","mappings":"mBACA,MAAMA,EAAU,mDAOhB,SAASC,EAASD,EAASE,GACvB,MAAMC,EAAM,IAAIC,IAAIJ,GAIpB,OAHAK,OAAOC,QAAQJ,GAAQK,SAAQ,EAAEC,EAAKC,MAClCN,EAAIO,aAAaC,OAAOH,EAAKC,EAAMG,WAAW,IAE3CT,EAAIS,UACf,CAsDAC,OAAOC,QAAQC,UAAUC,aAAY,CAACC,EAASC,EAAQC,KACnD,GAAuB,0BAAnBF,EAAQG,QAKZ,GAAuB,cAAnBH,EAAQG,QAA0BH,EAAQI,OAG1C,OAxDRC,eAA4BD,GACxB,IACI,MAAM,OAAEE,SAAiBV,OAAOW,QAAQC,KAAKC,IAAI,UACjD,IAAKH,EACD,MAAO,CAAEI,MAAO,mBACpB,IAAIC,EACJ,MAAMC,EAAgB5B,EAASD,EAAS,CACpCqB,SACAS,QAASP,EACTQ,MA5BmB,MA+BvB,GADAH,QAAiBI,MAAMH,IAClBD,EAASK,GACV,MAAM,IAAIC,MAAM,uBAAuBN,EAASO,UACpD,IAAIC,QAAaR,EAASS,OAC1B,MAAMC,EAjCd,WACI,MACMC,EADMC,OAAOC,SAASC,KACVH,MAAM,wBACxB,OAAOA,EAAQA,EAAM,GAAK,IAC9B,CA6ByBI,GACjB,GAAIP,EAAKQ,mBAAuD,IAAlCR,EAAKQ,kBAAkBC,QAAgBP,EAAU,CAC3EQ,QAAQC,IAAI,yDACZ,MAAMC,EAAkB/C,EAASD,EAAS,CACtCsC,WACAR,QAASP,EACTQ,MAxCe,MA2CnB,GADAH,QAAiBI,MAAMgB,IAClBpB,EAASK,GACV,MAAM,IAAIC,MAAM,uBAAuBN,EAASO,UAEpDC,QAAaR,EAASS,MAC1B,CACA,MAAO,CAAEY,gBAAiBb,EAC9B,CACA,MAAOT,GACH,MAAO,CAAEA,MAAOA,EAAMuB,QAC1B,CACJ,CAoBQC,CAAalC,EAAQI,QAAQ+B,KAAKjC,IAE3B,OANPA,EAAa,CAAEkC,mBAfvB,WACI,MAAMC,EAAaC,SAASC,iBAAiB,WAC7C,IAAK,MAAMC,KAAaH,EACpB,GAAsC,cAAlCG,EAAUC,aAAaC,OAAwB,CAC/C,MAAMC,EAAiBH,EAAUI,mBACjC,GAAID,GAAkBA,EAAeE,UAAUC,SAAS,eACpD,OAAOH,EAAeF,aAAaC,QAAU,IAErD,CAEJ,OAAO,IACX,CAGmCK,IAQ/B,G","sources":["webpack://sam-gov-extension/./src/content.ts"],"sourcesContent":["\"use strict\";\nconst baseUrl = 'https://api.sam.gov/prod/opportunities/v2/search';\nconst opportunitiesDataLimit = 1000;\nfunction getNoticeId() {\n    const url = window.location.href;\n    const match = url.match(/\\/opp\\/([a-f0-9]+)\\//);\n    return match ? match[1] : null;\n}\nfunction buildUrl(baseUrl, params) {\n    const url = new URL(baseUrl);\n    Object.entries(params).forEach(([key, value]) => {\n        url.searchParams.append(key, value.toString());\n    });\n    return url.toString();\n}\n/*\n  Fetches data from the SAM API.\n  - First use the solnum in the parent document to fetch data.\n  - If no results are found with solnum, it tries to fetch data using\n    noticeid derived fom the current SAM.gov URL.\n*/\nasync function fetchAPIData(solnum) {\n    try {\n        const { apiKey } = await chrome.storage.sync.get('apiKey');\n        if (!apiKey)\n            return { error: 'API key not set' };\n        let response;\n        const withSolnumUrl = buildUrl(baseUrl, {\n            solnum,\n            api_key: apiKey,\n            limit: opportunitiesDataLimit\n        });\n        response = await fetch(withSolnumUrl);\n        if (!response.ok)\n            throw new Error(`HTTP error! status: ${response.status}`);\n        let data = await response.json();\n        const noticeid = getNoticeId();\n        if (data.opportunitiesData && data.opportunitiesData.length === 0 && noticeid) {\n            console.log(\"No results found with solnum. Trying with noticeid...\");\n            const withNoticeIdUrl = buildUrl(baseUrl, {\n                noticeid,\n                api_key: apiKey,\n                limit: opportunitiesDataLimit\n            });\n            response = await fetch(withNoticeIdUrl);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            data = await response.json();\n        }\n        return { opportunityData: data };\n    }\n    catch (error) {\n        return { error: error.message };\n    }\n}\nfunction getSolicitationNumber() {\n    const headerDivs = document.querySelectorAll('.header');\n    for (const headerDiv of headerDivs) {\n        if (headerDiv.textContent?.trim() === 'Notice ID') {\n            const descriptionDiv = headerDiv.nextElementSibling;\n            if (descriptionDiv && descriptionDiv.classList.contains('description')) {\n                return descriptionDiv.textContent?.trim() || null;\n            }\n        }\n    }\n    return null;\n}\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    if (request.action === \"getSolicitationNumber\") {\n        const solicitationNumber = getSolicitationNumber();\n        sendResponse({ solicitationNumber });\n        return;\n    }\n    if (request.action === \"fetchData\" && request.solnum) {\n        fetchAPIData(request.solnum).then(sendResponse);\n        /* have to return true for chrome callback if async */\n        return true;\n    }\n});\n"],"names":["baseUrl","buildUrl","params","url","URL","Object","entries","forEach","key","value","searchParams","append","toString","chrome","runtime","onMessage","addListener","request","sender","sendResponse","action","solnum","async","apiKey","storage","sync","get","error","response","withSolnumUrl","api_key","limit","fetch","ok","Error","status","data","json","noticeid","match","window","location","href","getNoticeId","opportunitiesData","length","console","log","withNoticeIdUrl","opportunityData","message","fetchAPIData","then","solicitationNumber","headerDivs","document","querySelectorAll","headerDiv","textContent","trim","descriptionDiv","nextElementSibling","classList","contains","getSolicitationNumber"],"sourceRoot":""}